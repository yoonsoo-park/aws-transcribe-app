Sounds good. Yeah, and it does have to be tickets, you too. Um, main thing is just talking about how we want to break down the bodies of work and then I could, uh, I could help on the side. So, um, don't worry about that. Yes sir. Uh, so based on what I got so far, uh, seems like, uh, first thing first, we need to make, uh, the, the ripple, uh, with the skeleton, um. Like skeleton project that we need to have the first. My, my earbud is not working well. Can you guys still hear me? Yes. Yes. OK. Uh, so this is the, what Megna shared with us. Um, I think it has, uh, some stacks ready, um. So the question for Magnum like is this like everything we need to have like dynamo DB and uh I know there's like um very boilerplate lambda is here too, but is this the uh skeleton project we're gonna use? That was the idea. The stacks part, uh, the stacks part, I basically use the simple awesome generator to get the basic skeletons, and I think Dion is working on adding the simple lambda instead of the new function. Yeah, so, so I'm in the process of taking that lambdas is they're throwing them away and creating the structure in place that we tie lambdas and APIs and all things together via single unified spec. Um, and so that will be the requirement. I need to push that first once I'm done with that, uh, before we are able to do any actual lambdas unless we go to the lambda itself, meaning the functional piece of the lambda, but do not, uh, uh, concern ourselves with the structural piece of uh deploying and integrating it to the API. Um, so if we separate those two, in theory, there would be a, um, we could start with some of the lambdas, but until we have the, the framework in place, uh, that probably will not be possible. My only I was thinking we should have the framework in place, especially for somebody like me who has not worked with AWS in the past, I would need some sort of a setup in place. The the the framework does make it much easier because you don't really have to worry about how to define the various components that encompasses your, your API gateway. You create that spec, you indicate where you want that lambda to lie, um. And then you just have to create the lambda and a, and like a one liner to in, in both of those things, one liner to create the lambda, a one liner to create the, the API um and so that does help a lot as to speed up, especially when we add a bunch of these lambdas. But it won't take terribly long to create that. Um, it probably, it, uh, uh, uh, meaning I, I'm essentially pulling in some code and I'm cleaning up some code and removing some code. Uh, it's only very long to create that example thing. Um, it's, I said I have that available soon. OK. And yeah, and so in terms of like the stacks that you asked, uh, I'm not sure if we will, I'm, I'm, I'm sure we will need a data stack. We will need like some sort of a pipeline stack in the future, but for now, I thought this was enough for us to begin with and this was the bare minimum. So, so don't worry about the pipeline stacks and any of those things. I would say that is uh a titan that we can put as a separate item if we want to start working on a deployment of it. Um, we're not really progressing through any of these, um, um, staging areas, so we're not gonna go from there of the gearing and all of those things. And that is really involved for mostly with that, um, the, the functional stacks is the things that we need to focus on. So that would be the, the, well, um, I guess, uh, the, they also generate a called application stacks. So the, the application stack, the data stack, and the uh API stack, those are the things we want. OK. So stack is the lambda stack. Um, well, the code that I looked at it uh on the pull request, it's called it stack. And so, uh, and it was the lambda. So I'm assuming that is the lambda. So that's. At least that's where I'm putting the lander stuff in. I'm putting the landers in the stack, you know. OK, gotcha. Um, so I was thinking like, uh, if you guys want me to put a little bit more the, the basic stuff in here, I can totally do that, but seems like it's not a main focus, then yeah, we can just move on to. Uh, So, the first thing first, uh, I break down the ticket in the big four category. Uh, one is the backend, front end, and authentication, and the last one is the external service integration. From the top, from, uh, the back end, uh, the ticket, first ticket I'm thinking about is we are gonna build the dynamo DB schema. And in here, what we want to have is the main need this item in here. So the primer, uh, primary key is gonna be the domain and uh we want to save the, the tenants ID in here. We're gonna retrieve this uh from the front end later. Uh, but yeah, I, uh, the catch up talk about like if there's like a security concern that Dion was worried about their exposing the tenants ID to the front end. Is this correct? Yeah, so, so first of all, uh, domain should not be the primary key in this case because this object is ultimately going to be used to store information that we need on a tenant. One of them will be the domain. We will need other tenant-related information. Um, and some of those things we wouldn't want to duplicate. And so I would, uh, The, the primary key here should be tenant ID and we can have as many additional, additional indexes as we want to search for any of these other fields. um, but the primary key here is a tenant ID. Gotcha. Presumably that would want to point us to the correct user pool, the IDP. Your reader QRL as well. Yeah. And so for our initial thing, we can put as much data in here that we like, uh, even, uh, meaning, um, and, and, and maybe in the future, we can pull some of that information from the multi-tendency or from other places. Yeah. But the domain is going to be the first thing we need to put there and we're gonna have the IDP and we're gonna have to. Yeah, that's really the two, the two primaries at the moment. I think we can get a user IDG from another place. Dang, I make it tiny and I don't know how to cook it. OK. that. 12. OK. Um, other than that, uh, this is simple enough. So in the stack. The, in our ripple, you're gonna create uh the dynamo DB define somewhere like I think we're gonna make another stack, uh, say like a data stack, something like that, and that is going to create the dynamo DB and uh don't worry so much about, yeah, so just the primary design principle for Dynamo DB is we create the fields that we First of all, there's no field creation, right? Uh, fields are just there unless we create an index on them. Um, but we do not create anything prior to when we need them. Right? And so, in other words, um, unless we put anything tied to things like status or create a date, we should not create it. Um, and so, even though these are maybe an interesting idea to create, as I would wait until we have a feature or function that uses that. Um, otherwise, there is no point in doing that. Um, and these can be updated anytime, anytime. So, so Dynamo D doesn't actually have a database doesn't have definition of fields. It only has a knowledge of the primary keys, um, and essentially you can add or um you can add any field at any point, at any time. There's no predefinition of what a field needs to be. The, the, once you start using it, it's there kind of thing. Um. So for parity's sake, for like the previous records that existed before the new fields were added. They will just have like null or empty empty empty yeah. Sweet, right? Uh, Anything else? But you know, again, the for the speed things up, um, I'm gonna through the general idea, we're gonna create the ticket and you guys feel free to change anything that is not right or something like uh you guys need to modify it, update it, feel free to do it. How do you all feel about Making that one ticket. Yeah, that's a good ticket. I mean, essentially, it's a change to a data stack. Uh, it's I think that's right it's just one ticket there. Oh no, I meant, uh, sorry, uh, combining that with the lambda that would call it. Like you said, so we're not creating it before it's even used. True. This is the, I don't think you would be able to get a smaller ticket than this one, because this would be like, I don't know, uh, a handful of lines in the data, so you're right. This is, this is probably, it makes more sense to tie it to something that uses it. Um, but so we, uh, Yeah, um, So the thing when we get to the next one first before we start doing that is I don't even think that lambda is needed. I don't see when the lambda would be used. Um, but I would tie this data, this, this Dynamo DB stack to code that use it. Um, so that you can test it. OK. Uh, so then something like uh this ticket can be combined into one thing. Because the, this ticket is about using um Dynam DB to query. To get the the tenant's ID. Uh, yeah. And uh, so this, this is the domain lookup, right? Uh, and so, um, we don't need that from the client, um, with our current implementation. And so there's no lambda needed for that function. Um, we need this, uh, once we're functionally going to use this, um, to, to, to detect the tenant. And so what this really is, is, um, this is gonna be wrapped up in a larger item that is called the assumption, uh, of a tenant, meaning, assuming the tenant. Um, and that the process of assuming the tenant is going to, uh, Determined needs to know what the tenant is. Um. So I guess we need to discuss that, um. Every, uh, a lot of the APIs will need to be done in the las will have to be done in the, in the context of a tenant. In other words, they will have to assume the tenant because the person making the call is not gonna be the tenant. Um, and so that will have to happen on every single lambda that we have, um, because we come in as a, as a cognito session. And so we're going to have to every time assume the tenant. So the question is this. How do we feel is a safe approach for us to Receive that information. Um, because if we were to receive the tenant ID on all requests, that would help, make it simple. We assume the tenant once we get the tenant ID, but it does have the risk of the tenant becoming in. Uh, someone changing the, sending a different tenant ID in the, in the request. Um, and so the other option is to get the, um, domain. Um, in that case, the sta that does come into play because that means we get, well, both of those cases, um, that may come into play. We have like an initial lambda that just goes and fetches that for us and then hands it over? I, I, I forgot some of my thought processes in the past. I, I thought about this in the past. What I think we should do, uh, is the following is the cognito session. Its tied to a user. The user provides you with their email address. Um, and so we can retrieve this, the user. Domain from the session. In other words, we do not require anyone to send us anything. Um, we will automatically in the very beginning of a lambda, determine what the email is, determine what the domain is, and look up the domain, get the tenant ID, assume the tenant, and do what we need to do. And so we don't need the client to send us anything. Um, the user will provide that details during their login process. Um, and so we do not have a need, um, technically for a function that, that does a lookup for tenant or domain. So this is maybe more of a shared lambda tool that would be used presumably by our other APIs that um you know, acquire environment information and stuff like that. Exactly. So, um, there's under the lambda folder, we're going to have a folder called shared lambda. Uh, that's the pattern that is being used by other repos as well. And that's where we put all the share code. And so in there, we're going to put this function of capability in there. Um, there's gonna be very, very, very similar, um, well, from, from some point onwards, it's gonna be similar to the code that we can look at in the consumer gateway because it also assumes. It also assumes a tenant, um, because the call comes in from a customer of the tenant. Um, but we would have something before that to take the cognito session and determine what the tenant is. OK. And so, if I had to break that into two pieces, I could, we could technically break that into two pieces if we want to. We can have a ticket for uh extracting the The email and domain from the current cognitive session and looking up using the Dynamo DB for a tenant ID. So that will just be shared touch script code, not gonna be um um A lambda function. And, and, and, and I, the reason I say we can keep that as a unit because it's testable. um, and it's gonna be not the most fun thing to test because you have to try and uh Interrogate the session and stuff like that. It's, it, it, it, it's not going with it. It may be a little awkward, um, in the beginning. Um. Uh, I have a question. So In the, the page, there's the logo in page, login button. We click that and then that is direct to the, the IDP user put the ID and password, and then that page coming back to our front end. With the, the cognito is going to return the JWT token. And then using that token so that we can show the, the dashboard, right? Correct, it, it, it, there's a detail involved for purposes. Yeah, so, so in that point, the user seeing the front end page right now and then to bring the dashboard that we need to know who is this. So from front end is gonna request the back end. To what kind of dashboard should I show to this user. So for that, we need the tenant ID, correct? We do not know. The user will, yeah, exactly. The front end is just going to be based on what the user is and the, the user currently does that already. Uh, so the page and it, what it does is it asks the back end, give me the session information and part of the session information is a list of custom rules. And it currently based all of its decisions on custom rules. The group ID Yeah, that, or groups or whatever it's called one of those, yeah. But yeah, it's one of one of those things in the session. Yeah. OK. OK. And so, and so at that point, and so the funding can still do what it needs based on that. We're not necessarily proposing changing, but changing that. What we're discussing at the moment now is like once we start doing lambda functions, um how to authorize us to do some of those. Um, but we will really only get to that once we do. A real SSO. Well, no, not, no, not really. It's like the, the, the first time we're going to use that would be the first lambda would be created, probably be something like um list myorgs. Once you have the tenant ID information. Well, the tenant comes back to the client. Um, so the client will just give him the aux and he will get his back. But the, the lambda will have to, every time we have to figure out what uh the tenant is when it wants to do something in the context of a tenant. So I, I know this is getting ahead of myself a little bit because we already said that this is post POC, but when we do get to the point where we are using the AWS version of SSO or the AWS team's version of SSO, we don't have that tenant yet, right, because we need that to look up to the specific user pool. Which is associated with the tenant. So how would we at that point get it? If not through an API gateway call. And then we don't have the tenant to even access that gateway. So we don't have to in this case, it is. I'm not sure exactly. So there's no real difference when we're in the future or currently, we're going to end up being in a lambda function. We have a cognito user session, and we need to figure out what the tenant ID is because under none of those scenarios, now and in the future is the call gonna be made from the tenant. It's always gonna be made from the user, but we need a pre-login in that situation, right? So we wouldn't have the user context. That one, so we might want to discuss that separately, right? But we, the, the pre-login page is, is we're still gonna, we'll ask you for your for your email, uh, and that will then we then we will call another lambda would would not be protected by tenant authorization like most of these will be. Um, it will, it will, it will also not be protected by group ID. Um, it will be protected. It would, it would essentially be not protected at all. Yeah, flooding external API. Yeah, OK. And so we've done that, and that, um, I've done that before as well as, as we will put a different type of authorizer, um, on that, that would allow us to make a call to an API without having any authorization. Um, and all that will spit out is um the uh URL essentially of the, um, Because we need that we need to do it, need to direct it to, yeah, so, so that's gonna be a bit of a pain. It's always a pain to have no authorization on an API, but it's possible, and as I said, I, I did, did it within the last year or so, so we, we should be able to do it again. Um, but hopefully we don't have to worry about that right now. That was the only gap I was seeing in the implementation, so that makes sense. OK. But so, if we lump those two together, in other words, uh, like, meaning, Creation of the Dynamo DB combined with some utility method um to, I don't know. Retrieve the information from the cognito session, um, and find the, the the tenants ID. Mhm. Can I ask, sorry, can I, why do we not want it to be a lambda and a utility function instead? And to understand the difference. So when we're inside AWS we're not gonna unless absolutely necessary, we don't really call other landers because it's like we're already, I mean, we're already on the server. We already paid for our lambda, and we already have our instance start up, uh, and so we just use the code because we have all the code. Um, and so, and, and we have access to all the resources that the other lambda has. And so we create these utility methods and you just call the utility method and it works the same way. And so, yes, you are right. You, you could in theory, have a principle or a design where you create everything in lambda and you access it via lambdas. You will call a, a lot of lambdas. Um, so the cost will be much higher and to just make this for those services, and it will be slower, um, because you need to keep on calling these, lot of times slower. Once you're already there, but every time a lambda creates, it creates this little mini environment that pops up. So once it's the initial time, it will be cold. And so if you add all the call times for a lambda, it's a that is a big, it's actually, I mean, it's, it's very measurable and it's can be measured, it's measured in seconds. Um, it's like from a the call start. So the cold starts always gonna be an issue. Um, anyway, so there's a lot of reasons why we don't want to do it. yeah, but in those cases, interaction with a lambda always have to be through an API gateway, or is there a way to directly call a lambda from another lambda? I think you can call her directly, um, but it's not the standard. Yeah, I, I'll have to see how, um, we don't need to. I was just curious. I just, yeah, sorry, and so we're like, feel like we're on. Yeah, go ahead with your tickets. OK, uh, so, uh, I'm gonna, based on the, this, uh, recording, I'm gonna recheck and I'll update the ticket, but yeah, Dion, I want to recheck what I create does make sense to you, something like that. Right, uh, so next one is, uh, so seems like OK. The same guys that we don't need this. So I think you're cutting out a little bit towards me a little unique. Yeah, me too. Either the mic got disconnected or like was distorted a little. Yeah. So I actually do you know if I want to fix that up regarding association. Uh, very, uh, but if it's, uh, I was thinking, um. Yeah, I don't know. I don't know anymore. Uh, so I was thinking like the we got a talk to the like to find that um. Yeah. Well, I, I think you mentioned before he was having issues with his headsets. He probably needs to not use his headset because it it doesn't, I can't really hear you. Oh, really? How, how about now? Yeah, we can hear you better now. Slightly better, yeah. OK, OK. Uh, yeah, so it seems like, uh, this ticket also needs to be modified because this is using um API gateway from the front end to get the, the tenant's ID. Yeah, that one is not needed at all. We can just, we can just remove it. Gotcha. Yeah. The, the, the first actual backend ticket lambda that we need, um, if given that we're in the backend section now before we jump to the front end there, is we need a lambda to retrieve all the registered salesforce ports. Do you mind if I share my screen here on this one cause I kind of have it. Yeah, documented out. I do it. I'm just doing the, the diagram I already sent you guys, but I don't know if this is helpful or not. But I, I, I'd called what I think you're talking about as the environment manager or something to get us all of the different environment instances we need to relate to and as well as Environments which I kind of saw as the tabs in what Eric showed us with the sigma. Is that in line with what you were talking about? Yeah. So whether we have to create our own dynamo or not, I don't know, cause I know you said the other day, a lot of what we need is already a multi-tenancy, but Yeah, so, Correct. Um, and so, I guess, you know, so we probably don't need a lambda uh uh uh a dynamo DB for, well, let's, let's determine what it does first, right? And so, so that service is going to have to list the orgs that we, uh, that we want to list and based on that UI, there's a couple of pieces of information that we probably need. And so, um, a lot of that, um, is available today. Um, in, um, In Multi tendency. Um, But I feel that. It may not have everything that we need. Um, I'm looking here, uh, let me, let me. Yeah, so it So, what it means is that I think that we will end up using multi-tendency to determine the orbs that we want to return. But we may need more information than multi-tenancy stores. Um. How does the UI look again? What, what do we, I mean, Salesforce or don't really have a name name. And so what are we gonna just say production and sandbox like this how do we ident differentiate if we have two sandboxes, for example, or to productions have to be some sort of internal configuration, right up to the customer, but That I that's why I have like an environment label here is something I called out cause the way it is is exactly what you said. What if they have multiple production environments, what if they have multiple sandboxes, we need some way to differentiate between our individual environments and one production environment may not just be associated with Salesforce, right? It might be associated with whatever your omnichannel is or, or any other. And see no product, right? So there's theoretically multiple environment instances and I'm just like workshopping here we can call this whatever. There's theoretically multiple environment instances associated with the grand idea of an environment at the same time. It's not just a salesforce or ID. Right, so what we do have available, um, as we know, obviously the org ID and we know um the the environment type, so we know if it's um a sandbox or not a sandbox or essentially um. And we do have a company name, but they're all the same, depending on how they configured it, uh, they don't really necessarily change the company name for a sandbox and Question here, are we thinking about this ahead of time? Like, can we, can we get, can we talk about this again after we've some basic UI established? Like we can just go with like a single production or single org that they're domain logging in from. I like that. So what we're saying is we're ignoring the fact now that consciously that we want to differentiate between multiple orgs at the same time. Um, and for now, we can just display the time, right? Um, and, and so we still need what we're talking about in terms of the service. Um, to get the content. However, we will have a ticket in the future to figure out how we make better management for the customer or something like that. And if that's the case, we don't need the Dynamo DB. Uh, what we just need is we need to be able to, uh. Uh, well, we, we can if we want to, if we want to, if we, for I see multiple paths going forward. Um, if we get to the UIPs, uh, the UIPs can hardcode these values to proceed and not having to wait for the service. But given that we all can't work on the same spot at the same time, um, uh, at the same time, we can continue to create that service that will provide you with that information, the minimum information. Um, and so, um, I think we should still create this, this item for creating this service, um. And so we can get that information from multi-tenant. So the sequence will be, um we will Extract the tenant from the eurosation. We will assume the tenant. We will use uh multi-endency API to retrieve feature apps, which is what they're called. Um, and then we'll filter that based on our new feature that we've created. Um, and then we have our list of orgs and we'll map some of the fields back to the client. Um, and so that one requires several steps, right? And so we've broken up that very first piece as a ticket. We haven't broken out the second pieces a ticket, which is the assuming of a tenant, given a tenant ID. Um, and then we have this, this last piece that is using the multi-tenancy API to retrieve the future applications and pro and creating the lambda. Um, and so, even if we create all of these as tickets, um, it's probably gonna be the same person that does it. Right, because ultimately, it's like you can't do the lambda before the uh on the at least, let's rephrase it. There will be a dependency between those, um, they'll do the tendency between the lambda and the first two, but the first two won't depend upon another, I guess. OK, really. OK. There's, there's that. Um, And I guess the, yeah, so that one was OK, so, so I have the tickets I sort of have is we have the extraction of it, the The domain The domain or group ID session ID from, isn't that the ticket that we just discussed with you before? Exactly. So that's the first one. And then the second one is the uh utility to assume um the tenant based on the like based on the tenant ID. And then a service to get the features. Um, and so, you know, so then we have the service, but I, I feel like at that point, that one we can make as part of the lambda because otherwise, because that's gonna be where that service is being called. Um, I don't think we're gonna, I'm not sure if we're gonna use that. I don't know if we're gonna use that information in other places. Maybe we will. And so maybe you're right. Maybe we want to create some type of utility to get uh This code that gets the That gets the feature apps based on a given tenant, well, given the current tenant, um, at that point. And then, and then the lambda will put all of this together. And the actual, the actual app, the getting the feature apps exists somewhere. We just, we're just hitting that to extract it. Um, yeah, we would, uh, what we have to do is we have to verify if there is uh a method in the SDK to be able to send it. Um, and if not, we have to make an API call. But uh I'm pretty sure it's gonna be in the API, sorry, in the SDK, uh, I think, I think, yeah. OK, pulling back everybody to, I think this is a good path, but like I think we have like 3 tickets here for the UI part that I don't know who was talking about it the unca. The Can we start building the either the front end part of it without any of this? Because another person can start working on another. Yeah I think so. Yeah. So what, what, what's the very first thing we want to display? It's like, um, I mean, as, as we could, we could hard code the, the, the tenant piece, right? We can assume it's specific tenant and make it the system property or something. I don't know. Um, and so, and, and what we If we know that, then we can display that initial page. I was thinking, can we like wait, we can wait until this all this is figured out for the login page. How about just opening up with the modules and the submodule page instead. Uh, yeah, assuming that we've already logged in and that can keep going and once these services and the utilities are in place, we can come, come back to the login page and that time we don't have to mark or we don't have to like come up with anything, technically do two of those, right? I mean, so yes, that's what the first one that doesn't actually. I have a dependency because at the moment, I'm must guess we're assuming that most of those are gonna be either hardcoded or uh not just assumptions. Um, but depending on how many separate passes, the other one can be started with minimal marking, right? Um. Uh, in fact, in fact. Um. Uh. It is possible for us to I'm just sort of mentioning it now because I think it's in the beginning when we're still gonna have these dependencies. Um. It's possible for us to create that shell of a lambda, provide standard like a, a fixed response. Um, it doesn't have any of the fancy logic. And then we do the other stuff and then, and so that could be very, could be available very early in the process, um, to be able to be used by the UI development if we are, if we want multiple UI paths um to be able to, to create the application. And my, what is it going to return? Like even if we want, like what is it returning? So the first service will just return um the list of orgs. So and I mean if we are good, we can say I don't know, just one production or something like that. OK. Yeah, that. As a, as a side note, the, the way that the framework is that we're going to try and use for our lambdas and APIs um is it all works on the same structure. And if you pass in a parameter to the call that says, uh it's, it's mock or something, or something like that, it will respond automatically with the definition that you have in your spec. Um, in other words, uh, so if you said, this is an example response which you, you have to define when you create your thing. And then even if the the lab doesn't actually call the sort of calls a lambda, but it doesn't actually call the lambda code and it responds with it. Uh, in other words, um, to create a mark, um, is you just have to start with defining the spec, uh, and you don't have to actually have to implement the lambda. And as long as you call that, that function and pass 11 parameter, you can immediately start using it for testing. Because the spit provides an actual valid response. Um, So, so that is kind of useful in some cases. Nice. Cool. Uh, do you wanna share your board again? You were doing the front end piece. Is that aligned with what, what we were just talking now? Uh, yeah, so front end, um. Yeah, I agree with you back now, like we don't need to do the login page first, um, and, but the main thing we want to definitely for sure we need to have is the using the gator system. Uh, I, I have no idea what this Gator system honestly at this point. Um, but yeah, so we want to Maybe this is some kind of um. Not the POC but take a bite, something like that, learn how to use it, and then start using the gator system for the design our, you know, website to be pretty. Josh is already ahead of you on that. OK, that's fine. So, so, so just to be clear, um, I think Josh, you experimented with adding that to the control plane piece, right? Right, so I have that into that and So I guess the question there would be is, are we building out a separate Um, repo and, and stack there for continued development or are we gonna continue building on top of control plane. um We will, we will use both. And so the, the experience hub will be a separate repo. And so we will have to do similar things that you've done there to just sort of, sort of, to set it up so that we can start using it from the beginning, as opposed to having to come back to change it, I would imagine. I'd say like the POC that K and I shared and the one that Dion is working on, potentially you could take that and then start adding the scaffolding that's needed for gator system uh usage seems similar to how you have done in control plane. So, we have all that there. Well, take a look at the PSC if it has the stuff in it. But so I think that's uh sounds like a well-defined ticket, right? We, we need to, I guess, betterize our PFC. Um, and then from there onwards, we probably will need to continue using it. Yeah. And I think if we do any other tickets in the interim, which we probably will start, we're gonna immediately create somette which we would immediately have to adjust, but that's OK. I can point won't be that big of a deal. Yeah, and that is probably the first thing that needs to be done as part of the front end before we start working on other tickets. So the first thing that we discussed right now before we look at this was to add that first page, right? But uh but if we do that before we introduce Gator components into that specific repo, then it's obviously not gonna use gator and we would need to change that's what I'm saying let's do this first and make this on others. I agree we we could yeah. OK, cool with that. Moving on to next ticket. I'm trying to like keep things uh moving. He has a lot of there. Uh, uh, I think the bottom part we don't need to worry about anything is like, uh, from the wrong assumption, I think, um, so this one is, um, kind of my idea. So when we are Um, building the page, I think like a. Since this is like kind of POC and the demo just for the insight, I think we can make a certain page as a static and a certain page can be the um the uh sub rendering. So, which means uh if uh we um based on the who is logging, we gonna show the different thing is the server rendering page and then static pages that whoever joined is showing the same thing, like it's about page, um, you know, like uh what is, um, what is control plan, you know, for example, that kind of page can be static and the other page like we need a specific dynamic contents to show the different thing can be the sub rendering, like I said. So I, uh, so just, so, so just, just to, just to stop you for a second there. At the moment, we're going with the principle that the control plane has introduced. In other words, all pages are, there is no server side rendering at all. The entire site is static pages that ultimately is dynamic within the browser, but there's no server side browser, a server side generation. Um, and so there's no service side component other than the backend services that we have, the lab does, uh, everything else is client side. So everything is gonna be steady. Yeah, it's, I feel static is, is, it is the technically correct term, but it feels, uh, it's gonna be dynamic, but it will be on the client side. That was messing me up so bad when you were talking about. It's, it's a static website. In other words, it's, there's no server side rendering. Uh, all rendering is on the client side, but it, uh, The content of that static pages will be dynamic. Can I swing this back towards the back end for a second, um. Do we need an additional service for launching or redirecting to external pages, um, like that code you showed us in the technical where we actually get the same older stuff like that, um, that's correct, yeah, we need a service for that. We're we're going to need a service for that, um. It's best to have a service for that. Um, yeah, definitely a service for that. Um, but we may want to do that. We can, should we, what we want to create a like a, like a, like a bench, like a ticket for that now. Um, I feel like there's a couple of others UI related things that we probably need to do first before we get to that point where we have, we we get that far. But, OK, but I mean, we can do that. I mean, so yeah, so that service is well I don't know what we'll call it, we'll we'll get a good name for it. Um, we'll return all the content that is needed for the SAML assertion so that we can redirect a user to a specific Salesforce or. Oh, I'm saying Salesforce or because I'm thinking Salesforce, but really, um, external, external website, yeah. But it will probably, it will probably support um Uh, like an, like an org ID as input as well as optional because if you want to go to Salesforce, you're gonna say, give me something for this org ID. I don't know exactly there's only gonna be one for Omni, so we'll have some way of identifying that you want that Omni, I guess. Or maybe there'll be more than one Omni. Is there gonna be more than one Omni? a pages, probably just one. Yeah, I mean I think you landed one page and then Salesforce URL though. For me? Oh, the, the other side, uh, it's, I don't even know what you are. That's it's not, it's not a sales for for. It's gonna be somewhere hosted my WS to get into the admin. But there's some identifier for that side as well. Um. It But I think at the moment we're assuming our current assumption is that there's one location where they go. Yeah, that, that piece, we still need to investigate that side. Um, because I think what's gonna end up happening is if we have an org on this side. Um, and that time you're gonna have a company ID. Uh, and so we're probably gonna have to expand the solution to have a company ID and I don't know, maybe we can direct directly to a company ID, um, we'll probably log into one place, but when we have the redirect the, this, this path that we want to land on, maybe we'll direct them to a specific company because that's gonna be a unit, uh, Salesforce or ID combined with the company. But for the moment, let's call out a black box. We're just gonna have one link for that side. I've, I keep my, my ver very independent of Salesforce when I'm talking about it because I feel like the more and more I think about org IDs and stuff, it's it's, it's focusing in on only a certain part of what we're trying to solve for, yeah. Yeah. It's true, yeah, but yeah, so. Similar to what, so if you consider Salesforce as one place. And each org as a subset of that configuration. Then the, then the other side is roughly the same. They have one place you go for administration and within there, there is companies. Um, and, but unlike Salesforce where you log into a company, you do not log into a company on the other side. You log in as you and then you go to a company. Um, and, and so we're gonna end up having to store something similar, but I think we're gonna repeat this process that we just did with sales for and we're gonna figure out what we need to store. Oh, maybe the company ID and somehow we're gonna have to, that one we may actually have to store or figure out where we can get it from. Um, if not. At the moment, the simplest is that we assume we configure it, and we have it, and then We have to figure out what the URLs to get there and how to log in and SSL. So everything omni admin, still a big question. Um, for now, I think we assume it's just a single link. And we figure we will, we're gonna need tickets to do that. The investigation for that side. Mhm. But it would be nice if we had like an, like an account or something and access. Access would be nice. Apart from, apart from these, yeah, so I was just gonna say the POCs, we can have that one POC to investigate and find out how that works there and how we can make that connection. And in the same, because we're talking about the omnichannel in part, two other POCs that we talked about earlier was one, setting up omnichannel for our devOg, our test org. Uh, either we do it or have somebody else help us along the channel help us do that. And there was another one that I can't remember anymore. So, I don't know, Eric, did you get that? I know you're creating tickets. On the right. Yeah, um, I created a 4 or 5 right now. I just threw them in chat. I'm gonna need uh. Couple of y'all to kind of just review requirements and such, and maybe we could talk about it one more time or if if someone wants to take a stab at adding more color to these, we can uh talk through them tomorrow morning or whenever they're ready asynchronously through chat. Um, we talked about a lot here so um what, what uh I'll do is um I'll send everyone the recording and then we can kind of talk through the action items that's remaining. But that's kind of where I'm at. I don't think a lot of these bodies of work is fully refined to quote. Um, I think maybe one or two of y'all are ready to work on it though, so maybe those folks are the ones who kind of jumps in in that color. Oh. Yeah, I just don't want to schedule another session just to talk about individual criteria as such, but um it's up to y'all. Um, I'm open to both. Um, let me know what path we want to take. I just wanna make sure that we're not spending too much time on the, uh, on the, uh, workflow like I'd rather us create value and, you know, iterate and showcase what we got, you know what I'm saying? so. Yes. The, the, the problem though is that like, I mean, I see there's, it's like 5 people on this, on this call that's gonna actually want to do work. Um, and, um, the gator pieces, I feel isolated for the moment because there's a base that can be added. So that's sort of isolation. Everything else, well, I guess not everything else. A lot of the other ones are gonna step on one another's toes, uh, and, uh, especially in the beginning, until we start having some base functionality that we can, I don't even know if we're ever gonna have the ability to have enough work streams that everybody can work independently. Um. But that is gonna be one of the challenges. Yeah. Yeah. Yeah, and. And I think that's fine. Dion, um, with 5 engineers on this team, um, I think we'll always run into that and, um, all 5 of y'all are superstars, so, um, there might be perfect for me to take uh take the week off next week. So. In that vein, I actually have to off, but I feel like I'll cancel that because I want to get the framework done so that I don't hold people back. And so maybe I'll do that tomorrow and then I don't take another day off next week or something. Um, and so. OK. So, in, in case no one is claiming anything, I'm claiming the framework. And, and I will have to try and get that done before the end of day tomorrow, um. OK, so to reiterate, uh, Dean, when you say framework, you're talking about the base skeletons, right, with the lambda that you're gonna have. I'm gonna put lambda lambda that we're going to do, which is part of the first one. what is it uh works. So I'm gonna put a lambda that has no functionality in it other than it being deployed, it has an API and everything and it's infrastructure is so it, we can add the next lambdas just by doing one or two lines kind of thing. Um, and, and so that's my goals like a, like a non-functioning, um, environmentalists, uh, lambda, um, but our development team could each individually contribute to the two lambdas we've outlined and the shared lambda function, right, without stepping on each other's toes. Correct, yeah. Yeah, yeah, yeah. So, so the, the, the one piece, uh, you're right. The other tickets are sort of can be separate. That's how to assume um and how to um Extracted from the session, yeah. And then even though, even though getA one can be done separately too, technically. Because if, if we just make them all a separate code, we don't put them in the lambda, uh, eventually someone will just combine all these capabilities in terms of the lambda. All right, so that makes sense. So that was 3 smallish tickets, 4 really, I guess. That can be worked independently and then someone can do the beginning of the front you at the front end. Oh, we said we're gonna wait for the gator seats. Got it. OK, so the piece is one POC. And the piece is one PC. The scaffolding that Dion is working is one piece. There's another piece which is um extracting the session ID in the domain uh from the cognito and building the utility. We're going to combine that together into one, and the third, the fourth one is the other utility which is assuming the tenant ID um part which I'm honestly being very honest, I I don't know what it means to be assuming the tenant ID, but I'm putting that as another as 1/4 POC that we have. Uh, two other POCs? Sorry, I'm just making sure we're all on the same page and we're not missing out. The 5th POC is some sort of a definition for like, uh, coming up with like a context definition request for SAMO assertions. Before we get to that one, there's the one to retrieve the environment. The get feature apps part? Is that you say that? No, no, you're right. I was just thinking that we that that is. Dependent on the assuming tenant ID, so I did it. It's like under the assumption that you have that you are in the context of a tenant, then you can code it. Um, but, and so you may be able to test it with unit tests. Um, and you, and you, uh, maybe as I said, it's gonna be maybe a little, sometimes it could be a little tricky to figure out how to test that because when you're in a development environment, you're under the, you're under a tenant because you, you have credentials. So in theory, if you, you can make calls to the multi-tenancy thing, so you could test it. Um, it's just, there's gonna be some awkwardness there because, but it is testable and codable. Um, and it's just the same with that as a separate unit. And so, um, code that is executes in the context of a tenant, they should use it be able to use the tenant, uh, multi-tenancy APIs to get that information. Yeah, and we can wrap it in like some type of DTO and something so that it's easily available for the land that they eventually use kind of thing. OK. So I think, I think we're OK with this. Uh, did I miss anything else here? The, the other POC that I almost uh missed out was setting up of omnichannel with our test environment. I know it's like not immediately needed, but for later. The only thing that I would I would have is that many of the things that you call the POC is no longer POCs. Uh, they are actual it's POC we're coding into a big POC but the actual work. Story tickets, yes, sir. OK. OK, so we're on the same page and, oh, Eric, I see you posted something on the chat. OK, perfect. Yup, those are the things that I have as well. Great. The the content in the tickets, I don't even think I have 7 tickets, by the way, but um the content in it needs an update so um I'll I'll let me get everything kind of created placeholder wise, I'll post it. Let's add in flavor, and then let's get them quoted by tomorrow, um, so folks could get on it. Quoting is more for. Or not You cut out, but I think we understand coding is just t-shirt, yeah. Yeah, and so points, every, every ticket's 5 points. Done with the with the estimation. But we could argue about it for an hour. It's instructive discussion. It's like, I mean, that is, uh, some of the teams that I've worked with in the past, that is how they approached it, right? It's like they, they have a rough idea of what a ticket size should be and they break it down into small enough components that it matches that thing and they never quote. Um, and so the really the only question you ask is, is it small enough to be a ticket? Um, and it's like, yes or no kind of thing, but we can do whatever we like. Yeah. And I just want folks, everyone to see what's in the scope of the ticket. I think that's more important. And it's pointed at 5 folks just, you know, just put 5 on it just for fun, you know. So one last thing, looking at these 7 points that you have, I think the only dependency that we're gonna have, there's gonna be like 21 is the scaffolding that with the lambda that's gonna be there, and then the other one is the gator design after that. So, #3 1st, number 2 next, and then everything else can be worked in parallel. OK. And so, based on what I see is we're currently all jumping on the Branch that you could POC branch that you created, right? Uh, should we be, should we start pushing stuff to like Another branch or the main thing or it's just are you gonna continue using that one. It's sort of just from a procedural perspective. Um, I'm, whatever I'm testing right now is just PSE test, how to add another, so I don't have to push that. I don't, I don't want anybody to hold off because of that. That's just the PSC part. So you can take that POC. And create a a pull request with your lambdas and we can push it and we can have uh either a feature branch or into release. I think we're OK to just go into release and just go I think packaging process or anything like that yet. No. Yeah. We just like, we, we kick it off and we keep going. OK. And so, so that probably is another ticket we need to put on the list of to do is we don't need to do packaging, but I think we need to relatively early on get some level of uh CI build. Um, and so that it at least fails if someone breaks it and so that it, it that one person that doesn't accidentally makes a mistake doesn't cause a like a pain for everybody else kind of thing. Um, and it's just, it's, it doesn't have to be fancy. Um, it just needs to essentially build. Yeah. Yeah. I have no idea what that entails. Yeah, go ahead. I, I think they know, um, I think there's like a standardized CI process for a lot of this AWS development, um, so if you just go to the GitHub or channel and request it, I feel like I've seen requests like that in the past and they they'll put the generic. Um, but I can go ahead and request like required to. Approvals on PRs and stuff like that. If y'all are ready for that, or we can hold off. Uh, we can skip that for now. I would say let's skip that for the moment. Uh, but we do, we, we can get, I mean, that's a good thing is if we can, we can ask someone to like they want to add that build, build plan for us. That would be great. Uh, at least that way we, when we do submit and you get a pull request, we, we know if it fails or not or uh that would be useful. And we need to deploy it or promote it or anything like, well, it actually does deploy it, that build plan. It deploys everything locally and then it undoes everything and it's like, um, but, um, so that would be good to get in place. I have a clarification question. Uh, right now, all the things that at least what I've been doing has been with local servers. Uh, with the stacks being added, can we continue to do that or do we need to be able OK. OK. But once again, maybe not a bad thing to put it as a ticket for that is we do want to get to the point where we are able to deploy um so that we could run the server side thing because that, if we never get out of this dev environment, that's how we're going to have to run it for um um for insight as we're gonna, yeah, we, we can't do a local thing there. Um, and so that doesn't have to be immediate, but we do have to be able to deploy it at some point. I know Zach mentioned that there is a problem with running uh unless it's on a QA or. I think staging was also not working, right, Keisha? But we were not able to run on staging. And so when I say deploy, I don't actually mean promoting to any of the higher levels. Um, I'm just saying that we want to be able to push the code for the UI to the AWS account so that we could point to the um Dev accounts, I guess it's what they use Front gate or something so that we can serve the, the website. Uh, and so you're saying that that doesn't work on Dev. There was some sort of bug. Um, I'd have to look back and see what it was. He posted it in the channel, um, so we can track the progress. They, they would take it up. OK, OK, so, so then with that one we have to track because that is important, right? I mean, at least they resolve that, we, we're sort of stuck for insight. Although we have to Yeah, OK, cool. So until then we can continue to work on local, OK. It might have already been fixed. I know he, he, he sent me an update about something getting fixed. Um, I think it was a different thing though. Um, wait, but so just to reiterate, y'all don't want PR approvals required at this point in development? No, not yet. That will be my answer until forever. I, I would, I'm, I, I'm of a different opinion mainly because uh I'm new to this whole AWS development, and one of the ways that I learn things and how it's done is by looking at PRs and observing and asking questions and getting that. Part understood. So if we skip that whole review, I'm afraid I'm gonna miss out on a lot of, so just to be clear, I'm not suggesting we skip it. I'm just saying we don't make it a requirement. Um, and so in other words, it's like we can say between us it's like, yes, don't merge your code until someone approves it. Um, but if you have like a tiny change and it's like, I don't know, you need to change like a one liner or something and everybody else has gone home for the day and you want to get merch, you merge it. Yeah, the bottlenecks at this point, but I, I still wanna be able to lay eyes on changes um. Exactly for the same reasons. OK. I'm, I'm on board. Thank you. Or we can ask for one review. I don't know, either way. No, I'm, I'm OK with doing it as or foregoing the requirement as long as everyone's on the same page that we're not gonna be willy-nilly wild west merging code. I know, honestly, I'm not even worried about the willy nilly that part. I'm just worried about missing out on something somebody else has like done research on and worked on just because I'm not gonna touch that code again for like how many of months. I'm like completely lost on it and technically I'm supposed to own it. As moving forward and I should be able to like fix the bugs. So I just wanna be able to like observe. Yeah, and especially in the beginning, there's a little bit of will and it's OK. As long as we get to a slightly stable state and we can proceed. Uh. OK. OK. All righty, sounds good. Um, Eric, you can post the Um, tickets, whatever you have created, and then I think each one of us can like pick one of those and start adding meat into it, and we can pull it more. Yeah, I'll probably wait and see if you get that first scaffolding up and then I, I can look into getting that CI build process defined at that point. Um, you can, yeah, although I don't think, I hope that one doesn't have to depend on the other. Um, so the, the report as it is there has all the stacks that I, I'm not going to add any new stacks. Um, I am just changing the contents of the existing stacks. Substantially. Um, and so whatever process is put in place will work with what is there today or with what I put in place. So there really is no real dependency for the bull thing. That, that can, that can proceed at any point. Yeah. I think. OK. And so I wanted to ask, uh, I don't know, you said you uh looked at the POC. Is there anything missing uh from that initial piece? That you can think of that needs to be added. Oh, no, I, I did not look, look. I just uh glimpse over it, so, but I, I'm gonna double check after this. OK, perfect. Thank you. That will help because I know you've had experience with like, you know, maybe something stands out because I, I followed what was there in tenancy management and a couple of other commands, and that's how we've got that, so maybe something is missing. OK. Sorry, sorry, I, I, I'm just curious. Cool. Success. I'm also probably going to be here tomorrow. Technically, I'm taking off. I'm gonna be here tomorrow, uh, and then next week. Uh, yeah, I don't know. Well, don't work, we won't talk to you tomorrow. OK, cool. Or maybe that's what you're going for. Yeah, have fun, Magna. Thanks. All righty. Thank you. Thanks. Have a good one. Bye.
